@using System.Text.RegularExpressions
@model ESKOBSite.Viewmodel.IdeaViewmodel
@{
    ViewBag.Title = "Task";
    if (Model.LoggedIn != null)
    {
        Layout = "~/Views/Shared/_Manager.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
    ViewBag.Name = Model.Tenant.Name.ToLower();
    ViewBag.Reference = Model.Tenant.Reference.ToLower();
}
<head>
    <link href='~/Content/css/mentionsInput.css' rel='stylesheet' type='text/css'>

    <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js' type='text/javascript'></script>
    <script src='https://cdn.jsdelivr.net/npm/underscore@1.12.0/underscore-min.js' type='text/javascript'></script>

    <meta http-equiv="Cache-control" content="no-cache">
    <meta http-equiv="Expires" content="-1">
</head>

<div class="crumb circleBorder">
    <a href="~/@Model.Tenant.Reference/ideas/idea/@Model.Task.Idea.Id">Tasks</a>     •     <h1 class="title">@Model.Task.Title</h1>
</div>

<div class="panel idea wrap circleBorder">
    <div class="ideaDescription">
        <p>
            @Model.Task.Description
        </p>
    </div>
    <div class="scales">
        <span class="pValue medium pull-right">@Model.Task.Estimation</span>
    </div>
    <div class="bigMeta">
        <span class="metaText">
            Author: @Model.Task.Creator.Name • Comments: @Model.Task.Comments.Count()
        </span>
        <div class="hashtags">
            @{
                switch (Model.Task.Status)
                {
                    case "NOT_STARTED":
                        <a href="#" class="hashtag new hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Not Started">
                            NOT STARTED
                        </a>
                        break;
                    case "IN_PROGRESS":
                        <a href="#" class="hashtag progress hashtagButton" data-toggle="tooltip" data-placement="bottom" title="In Progress">
                            IN PROGRESS
                        </a>
                        break;
                    case "DONE":
                        <a href="#" class="hashtag implemented hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Done">
                            DONE
                        </a>
                        break;
                    case "DELETED":
                        <a href="#" class="hashtag deleted hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Deleted">
                            DELETED
                        </a>
                        break;
                    default:
                        break;
                }
            }
        </div>
        @{
            if (!Model.Task.Status.Equals("DONE") && !Model.Task.Status.Equals("DELETED") && Model.LoggedIn != null)
            {
                <div class="evaluate">
                    <a href="#" class="btn btn-accept glyphicon glyphicon-check pull-right" role="button" onclick="updateStatus(@Model.Task.Id, '@Model.Task.Status')"></a>
                    <a href="#" class="btn btn-deny glyphicon glyphicon-remove pull-right" role="button" onclick="deleteTask(@Model.Task.Id)"></a>
                </div>
            }
        }
    </div>
</div>

<div class="panel comments wrap circleBorder">
    <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#comments"></button>
    <span class="commentLabel" aria-hidden="true">
        Comments: @Model.Task.Comments.Count()
    </span>
    <ul id="comments" class="collapse comments">
        @foreach (var item in Model.Task.Comments)
        {
            if (item.Task == null)
            {
                <li class="comment">
                    <span class="commentDate">@item.Date.Day / @item.Date.Month / @item.Date.Year</span><br />
                    <span class="commentAuthor"><strong>@item.Author.Name</strong></span>
                    <p>
                        @{

                            foreach (String s in item.Body.Split(' '))
                            {
                                Match match = Regex.Match(s, @"^@\[[a-zA-z]{2,}\]\(Manager:\d{1,}\)*");
                                if (!match.Success)
                                {
                                    @: @s
                                }
                                else
                                {
                                    String result = s.Substring(s.IndexOf("[") + 1, s.IndexOf("]") - 2);
                                    @: <span class="atMention">@@@result</span>
                                }


                            }

                        }
                    </p>
                </li>
            }
        }
        @if (Model.LoggedIn != null)
        {
            <li>
                <form>
                    <textarea id="commentInput" class="descInput mention" placeholder="Comment"></textarea>
                </form>
            </li>
            <li>

                <button id="postComment" class="btn btn-primary get-mentions pull-right" role="button">
                    Post Comment
                </button>

            </li>
        }
    </ul>
</div>

<script src='~/Scripts/jquery.events.input.js' type='text/javascript'></script>
<script src='~/Scripts/jquery.elastic.js' type='text/javascript'></script>
<script src='~/Scripts/jquery.mentionsInput.js' type='text/javascript'></script>

<script>
    var reference = "@(ViewBag.Reference)";

    function updateStatus(id, status) {

        var newStatus = "";
        if (status == "NOT_STARTED") {
            newStatus = "IN_PROGRESS";
        } else if (status == "IN_PROGRESS") {
            newStatus = "DONE";
        }

        $.ajax({
            url: 'https://localhost:44377/' + reference + '/tasks/' + id + '/' + newStatus,
            type: 'PUT',
            dataType: 'json',
        });

        window.location.reload(true);
    }

    function deleteTask(id) {
        $.ajax({
            url: 'https://localhost:44377/' + reference + '/tasks/escalate/' + id + '/DELETED',
            type: 'GET',
            dataType: 'json',
        });

        window.location.reload(true);
    }

    jQuery(document).ready(function ($) {
        $('textarea.mention').mentionsInput({
            onDataRequest: function (mode, query, callback) {
                $.ajax({
                    url: 'https://localhost:44377/' + reference + '/managers',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data, textStatus, xhr) {
                        function iterate(item) {
                            item.type = "Manager";
                        }
                        data.forEach(iterate);

                        data = _.filter(data, function (item) { return item.name.toLowerCase().indexOf(query.toLowerCase()) > -1 });

                        callback.call(this, data);
                    }
                });
            }
        });

        $('.get-mentions').click(function () {
            $('textarea.mention').mentionsInput('val', function (text) {

                @if(Model.LoggedIn != null)
                {
                    @: var id = @Model.LoggedIn.Id;
                }
                else
                {
                    @: var id = -1;
                }

                    var dataObject =
                    {
                    "Body": text,
                    "IdeaId": @Model.Task.Idea.Id,
                    "TaskId": @Model.Task.Id,
                    "AuthorId": id
                };

                var dataJson = JSON.stringify(dataObject);

                $.ajax({
                    type: "POST",
                    url: "https://localhost:44377/" + reference + "/comments",
                    contentType: "application/json",
                    data: dataJson,
                    success: function (data, textStatus, xhr) {
                        window.location.reload(true);
                    }
                });
            })
        });
    });

</script>
