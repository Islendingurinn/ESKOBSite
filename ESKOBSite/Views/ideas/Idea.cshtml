@using System.Text.RegularExpressions
@model ESKOBSite.Viewmodel.IdeaViewmodel
@{
    ViewBag.Title = "Idea";
    if (Model.LoggedIn != null)
    {
        Layout = "~/Views/Shared/_Manager.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
    ViewBag.Name = Model.Tenant.Name.ToLower();
    ViewBag.Reference = Model.Tenant.Reference.ToLower();
}
<head>
    <link href='~/Content/css/mentionsInput.css' rel='stylesheet' type='text/css'>

    <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js' type='text/javascript'></script>
    <script src='https://cdn.jsdelivr.net/npm/underscore@1.12.0/underscore-min.js' type='text/javascript'></script>

    <meta http-equiv="Cache-control" content="no-cache">
    <meta http-equiv="Expires" content="-1">
</head>

<div class="crumb circleBorder">
    <a href="~/@Model.Tenant.Reference/Ideas">Ideas</a>     •     <h1 class="title">@Model.Idea.Title</h1>
</div>

<div class="panel idea wrap circleBorder">
    <div class="priority">
        @{
            if (Model.LoggedIn != null)
            {
                switch (Model.Idea.Priority)
                {
                    case "H":
                        <a onclick="changePriority(@Model.Idea.Id)" id="priority" href="#" class="pValue high" title="High Priority">
                            H
                            <span class="pLabel">priority</span>
                        </a>
                        break;
                    case "M":
                        <a onclick="changePriority(@Model.Idea.Id)" id="priority" href="#" class="pValue medium" title="Medium Priority">
                            M
                            <span class="pLabel">priority</span>
                        </a>
                        break;
                    case "L":
                        <a onclick="changePriority(@Model.Idea.Id)" id="priority" href="#" class="pValue low" title="Low Priority">
                            L
                            <span class="pLabel">priority</span>
                        </a>
                        break;
                    default:
                        break;
                }
            }
            else
            {
                switch (Model.Idea.Priority)
                {
                    case "H":
                        <a id="priority" href="#" class="pValue high" title="High Priority">
                            H
                            <span class="pLabel">priority</span>
                        </a>
                        break;
                    case "M":
                        <a id="priority" href="#" class="pValue medium" title="Medium Priority">
                            M
                            <span class="pLabel">priority</span>
                        </a>
                        break;
                    case "L":
                        <a id="priority" href="#" class="pValue low" title="Low Priority">
                            L
                            <span class="pLabel">priority</span>
                        </a>
                        break;
                    default:
                        break;
                }
            }
        }
    </div>
    <div class="ideaDescription">
        <p>
            @Model.Idea.Description
        </p>
        <br />
        <br />
        <p class="pull-down">Employee number: @Model.Idea.Employee</p>
    </div>
    <div class="scales">
        @{
            switch (Model.Idea.Effort)
            {
                case 1:
                case 2:
                    <a href="#" class="pValue low" title="Low Effort">
                        @Model.Idea.Effort
                        <span class="pLabel">effort</span>
                    </a>
                    break;
                case 3:
                    <a href="#" class="pValue medium" title="Medium Effort">
                        @Model.Idea.Effort
                        <span class="pLabel">effort</span>
                    </a>
                    break;
                case 4:
                case 5:
                    <a href="#" class="pValue high" title="High Effort">
                        @Model.Idea.Effort
                        <span class="pLabel">effort</span>
                    </a>
                    break;
                default:
                    break;
            }

            switch (Model.Idea.Impact)
            {
                case 1:
                case 2:
                    <a href="#" class="pValue high" title="Low Impact">
                        @Model.Idea.Impact
                        <span class="pLabel">impact</span>
                    </a>
                    break;
                case 3:
                    <a href="#" class="pValue medium" title="Medium Impact">
                        @Model.Idea.Impact
                        <span class="pLabel">impact</span>
                    </a>
                    break;
                case 4:
                case 5:
                    <a href="#" class="pValue low" title="High Impact">
                        @Model.Idea.Impact
                        <span class="pLabel">impact</span>
                    </a>
                    break;
                default:
                    break;
            }
        }
    </div>
    <div class="bigMeta">
        <span class="metaText">
            Submitted @Model.Idea.Submitted • Last edit: @Model.Idea.Last_Edit • Comments: @Model.Idea.Comments.Count()
        </span>
        <div class="hashtags">
            @{
                switch (Model.Idea.Status)
                {
                    case "NEW":
                        <a href="~/@Model.Tenant.Reference/Ideas/Index/new" class="hashtag new hashtagButton" data-toggle="tooltip" data-placement="bottom" title="New Idea">
                            NEW
                        </a>
                        break;
                    case "UNDER_REVIEW":
                        <a href="~/@Model.Tenant.Reference/ideas/index/under_review" class="hashtag progress hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Idea In Progress">
                            UNDER REVIEW
                        </a>
                        break;
                    case "UNDER_IMPLEMENTATION":
                        <a href="~/@Model.Tenant.Reference/ideas/index/under_implementation" class="hashtag progress hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Idea In Progress">
                            UNDER IMPLEMENTATION
                        </a>
                        break;
                    case "IMPLEMENTED":
                        <a href="~/@Model.Tenant.Reference/Ideas/Index/implemented" class="hashtag implemented hashtagButton" data-toggle="tooltip" data-placement="bottom" title="New Idea">
                            IMPLEMENTED
                        </a>
                        break;
                    case "DELETED":
                        <a href="#" class="hashtag deleted hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Deleted Idea">
                            DELETED
                        </a>
                        break;
                    default:
                        break;
                }
            }
            @foreach (var hashtag in Model.Idea.Hashtags)
            {
                <a href="~/@Model.Tenant.Reference/Ideas/Hashtag/@hashtag.Tag" class="hashtag tag hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Test">
                    #@hashtag.Tag
                </a>
            }
        </div>

        @{
            if (!Model.Idea.Status.ToLower().Equals("deleted") && !Model.Idea.Status.ToLower().Equals("implemented") && Model.LoggedIn != null)
            {
                <div class="evaluate">
                    <a href="#" class="btn btn-accept glyphicon glyphicon-check pull-right" role="button" onclick="updateStatus(@Model.Idea.Id, '@Model.Idea.Status')"></a>
                    <a href="#" class="btn btn-deny glyphicon glyphicon-remove pull-right" role="button" onclick="deleteIdea(@Model.Idea.Id)"></a>
                </div>
            }
        }
    </div>
</div>

@{
    if (!Model.Idea.Status.ToLower().Equals("new"))
    {
        <div class="panel comments wrap circleBorder">
            <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#review"></button>
            <span class="commentLabel" aria-hidden="true">
                Cost Saving
            </span>
            <ul id="review" class="collapse comments">
                @if (Model.LoggedIn != null)
                {
                    <li>
                        <form>
                            <textarea id="costInput" class="descInput" rows="10" placeholder="Estimated Cost Savings">@Model.Idea.Cost_Save</textarea>
                        </form>
                    </li>

                    <li>
                        <a href="#" class="btn btn-primary pull-right" role="button" onclick="saveCost(@Model.Idea.Id)">
                            Save
                        </a>
                    </li>
                }
                else
                {
                    <li>
                        <form>
                            <textarea id="costInput" class="descInput" rows="10" placeholder="Estimated Cost Savings" readonly>@Model.Idea.Cost_Save</textarea>
                        </form>
                    </li>
                }
            </ul>
        </div>

        <div class="panel comments wrap circleBorder">
            <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#tasks"></button>
            <span class="commentLabel" aria-hidden="true">
                Tasks: @Model.Idea.Tasks.Count()
            </span>
            <ul id="tasks" class="collapse comments">
                @foreach (var item in Model.Idea.Tasks)
                {
                    <li class="idea">
                        <div class="info">
                            <div class="hashtags">
                                @{
                                    switch (item.Status)
                                    {
                                        case "NOT_STARTED":
                                            <a href="#" class="hashtag new hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Not Started">
                                                NOT STARTED
                                            </a>
                                            break;
                                        case "IN_PROGRESS":
                                            <a href="#" class="hashtag progress hashtagButton" data-toggle="tooltip" data-placement="bottom" title="In Progress">
                                                IN PROGRESS
                                            </a>
                                            break;
                                        case "DONE":
                                            <a href="#" class="hashtag implemented hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Done">
                                                DONE
                                            </a>
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            </div>
                            <h2 class="title">
                                <a href="~/@Model.Tenant.Reference/Tasks/Task/@item.Id">@item.Title</a>
                            </h2>
                            <div class="meta">
                                <span class="metaText">
                                    Author: @item.Creator.Name • Comments: @item.Comments.Count()
                                </span>
                            </div>
                        </div>
                    </li>
                }

                @if (Model.LoggedIn != null)
                {
                    <li>
                        <a href="~/@Model.Tenant.Reference/tasks/create/@Model.Idea.Id" class="btn btn-primary pull-right" role="button">
                            Add Task
                        </a>
                    </li>
                }
            </ul>
        </div>

        <div class="panel comments wrap circleBorder">
            <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#comments"></button>
            <span class="commentLabel" aria-hidden="true">
                Total Comments: @Model.Idea.Comments.Count()
            </span>
            <ul id="comments" class="collapse comments">
                @foreach (var item in Model.Idea.Comments)
                {
                    if (item.Task == null)
                    {
                        <li class="comment">
                            <span class="commentDate">@item.Date.Day / @item.Date.Month / @item.Date.Year</span><br />
                            <span class="commentAuthor"><strong>@item.Author.Name</strong></span>
                            <p>
                                @{

                                    foreach (String s in item.Body.Split(' '))
                                    {
                                        Match match = Regex.Match(s, @"^@\[[a-zA-z]{2,}\]\(Manager:\d{1,}\)*");
                                        if (!match.Success)
                                        {
                                            @: @s
                                        }
                                        else
                                        {
                                            String result = s.Substring(s.IndexOf("[") + 1, s.IndexOf("]") - 2);
                                            @: <span class="atMention">@@@result</span>
                                        }


                                    }

                                }
                            </p>
                        </li>
                    }
                }
                @if (Model.LoggedIn != null)
                {
                    <li>
                        <form>
                            <textarea id="commentInput" class="descInput mention" placeholder="Comment"></textarea>
                        </form>
                    </li>
                    <li>

                        <button id="postComment" class="btn btn-primary get-mentions pull-right" role="button">
                            Post Comment
                        </button>

                    </li>
                }
            </ul>
        </div>
                                }
}

@{
    if (Model.Idea.Status.ToLower().Equals("implemented"))
    {
        <div class="panel comments wrap circleBorder">
            <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#challenges"></button>
            <span class="commentLabel" aria-hidden="true">
                Challenges
            </span>
            <ul id="challenges" class="collapse comments">
                @if (Model.LoggedIn != null)
                {
                    <li>
                        <form>
                            <textarea id="challengesInput" class="descInput" rows="10" placeholder="Challenges">@Model.Idea.Challenges</textarea>
                        </form>
                    </li>
                    <li>
                        <a href="#" class="btn btn-primary pull-right" role="button" onclick="saveInfo(@Model.Idea.Id)">
                            Save
                        </a>
                    </li>
                }
                else
                {
                    <li>
                        <form>
                            <textarea id="challengesInput" class="descInput" rows="10" placeholder="Challenges" readonly>@Model.Idea.Challenges</textarea>
                        </form>
                    </li>
                }
            </ul>
        </div>

        <div class="panel comments wrap circleBorder">
            <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#results"></button>
            <span class="commentLabel" aria-hidden="true">
                Results
            </span>
            <ul id="results" class="collapse comments">
                @if (Model.LoggedIn != null)
                {
                    <li>
                        <form>
                            <textarea id="resultsInput" class="descInput" rows="10" placeholder="Results">@Model.Idea.Results</textarea>
                        </form>
                    </li>
                    <li>
                        <a href="#" class="btn btn-primary pull-right" role="button" onclick="saveInfo(@Model.Idea.Id)">
                            Save
                        </a>
                    </li>
                }
                else
                {
                    <li>
                        <form>
                            <textarea id="resultsInput" class="descInput" rows="10" placeholder="Results" readonly>@Model.Idea.Results</textarea>
                        </form>
                    </li>
                }
            </ul>
        </div>
    }
}

<script src='~/Scripts/jquery.events.input.js' type='text/javascript'></script>
<script src='~/Scripts/jquery.elastic.js' type='text/javascript'></script>
<script src='~/Scripts/jquery.mentionsInput.js' type='text/javascript'></script>

<script>
    var reference = "@(ViewBag.Reference)";

    function updateStatus(id, status) {
        var newStatus = "";
        switch (status) {
            case "NEW":
                newStatus = "UNDER_REVIEW";
                break;
            case "UNDER_REVIEW":
                newStatus = "UNDER_IMPLEMENTATION";
                break;
            case "UNDER_IMPLEMENTATION":
                newStatus = "IMPLEMENTED";
                break;
            default:
                break;
        }

        $.ajax({
            url: 'https://localhost:44377/' + reference + '/ideas/' + id + '/' + newStatus,
            type: 'PUT',
            dataType: 'json',
        });

        window.location.reload(true);
    }

    function deleteIdea(id) {
        $.ajax({
            url: 'https://localhost:44377/' + reference + '/ideas/' + id + '/DELETED',
            type: 'PUT',
            dataType: 'json',
        });

        window.location.reload(true);
    }

    function changePriority(id) {
        var priority = document.getElementById("priority");
        var next = "";

        switch (priority.innerHTML.substring(0, 1)) {
            case "L":
                priority.classList.remove("low");
                priority.classList.add("medium");
                next = "M";
                break;
            case "M":
                priority.classList.remove("medium");
                priority.classList.add("high");
                next = "H";
                break;
            case "H":
                priority.classList.remove("high");
                priority.classList.add("low");
                next = "L";
                break;
            default:
                break;
        }

        priority.innerHTML = "" + next + priority.innerHTML.substring(1, priority.innerHTML.length);

        var dataObject = {
            "Priority": next
        }

        $.ajax({
            type: 'PUT',
            url: 'https://localhost:44377/' + reference + '/ideas/' + id,
            contentType: 'application/json',
            data: JSON.stringify(dataObject)
        });
    }

    function saveInfo(id) {
        var cost = document.getElementById("costInput").value;
        var challenges = document.getElementById("challengesInput").value;
        var results = document.getElementById("resultsInput").value;
        var dataObject = {
            "Cost_Save": cost,
            "Challenges": challenges,
            "Results": results
        }

        $.ajax({
            type: 'PUT',
            url: 'https://localhost:44377/' + reference + '/ideas/' + id,
            contentType: 'application/json',
            data: JSON.stringify(dataObject)
        });

        window.location.reload(true);
    }

    jQuery(document).ready(function ($) {
        $('textarea.mention').mentionsInput({
            onDataRequest: function (mode, query, callback) {
                $.ajax({
                    url: 'https://localhost:44377/' + reference + '/managers',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data, textStatus, xhr) {
                        function iterate(item) {
                            item.type = "Manager";
                        }
                        data.forEach(iterate);

                        data = _.filter(data, function (item) { return item.name.toLowerCase().indexOf(query.toLowerCase()) > -1 });

                        callback.call(this, data);
                    }
                });
            }
        });

        $('.get-mentions').click(function () {
            $('textarea.mention').mentionsInput('val', function (text) {

                @if(Model.LoggedIn != null)
                {
                    @: var id = @Model.LoggedIn.Id;
                }
                else
                {
                    @: var id = -1;
                }

                var dataObject =
                {
                    "Body": text,
                    "IdeaId": @Model.Idea.Id,
                    "AuthorId": id
                };

                var dataJson = JSON.stringify(dataObject);

                $.ajax({
                    type: "POST",
                    url: "https://localhost:44377/" + reference + "/comments",
                    contentType: "application/json",
                    data: dataJson,
                    success: function (data, textStatus, xhr) {
                        window.location.reload(true);
                    }
                });
            })
        });
    });

</script>
