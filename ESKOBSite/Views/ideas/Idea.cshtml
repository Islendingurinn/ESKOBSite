@model ESKOBSite.Viewmodel.IdeaViewmodel
@{
    ViewBag.Title = "Idea";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Database = Model.Database.ToLower();
}
<head>
    <script src="https://code.jquery.com/jquery-1.9.1.js"></script>
    <script src="https://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
    <script src="~/Scripts/jquery.mentions.js" type="text/javascript"></script>
</head>

<div class="crumb circleBorder">
    <a href="~/@Model.Database/Ideas">Ideas</a>     •     <h1 class="title">@Model.Idea.Title</h1>
</div>

<div class="panel idea wrap circleBorder">
    <div class="priority">
        @{
            switch (Model.Idea.Priority)
            {
                case "H":
                    <a href="~/@Model.Database/Ideas/Index/h" class="pValue high" title="High Priority">
                        H
                        <span class="pLabel">priority</span>
                    </a>
                    break;
                case "M":
                    <a href="~/@Model.Database/Ideas/Index/m" class="pValue medium" title="Medium Priority">
                        M
                        <span class="pLabel">priority</span>
                    </a>
                    break;
                case "L":
                    <a href="~/@Model.Database/Ideas/Index/l" class="pValue low" title="Low Priority">
                        L
                        <span class="pLabel">priority</span>
                    </a>
                    break;
                default:
                    break;
            }
        }
    </div>
    <div class="ideaDescription">
        <p>
            @Model.Idea.Description
        </p>
    </div>
    <div class="scales">
        @{
            switch (Model.Idea.Effort)
            {
                case 1:
                case 2:
                    <a href="#" class="pValue low" title="Low Effort">
                        @Model.Idea.Effort
                        <span class="pLabel">effort</span>
                    </a>
                    break;
                case 3:
                    <a href="#" class="pValue medium" title="Medium Effort">
                        @Model.Idea.Effort
                        <span class="pLabel">effort</span>
                    </a>
                    break;
                case 4:
                case 5:
                    <a href="#" class="pValue high" title="High Effort">
                        @Model.Idea.Effort
                        <span class="pLabel">effort</span>
                    </a>
                    break;
                default:
                    break;
            }

            switch (Model.Idea.Impact)
            {
                case 1:
                case 2:
                    <a href="#" class="pValue high" title="Low Impact">
                        @Model.Idea.Impact
                        <span class="pLabel">impact</span>
                    </a>
                    break;
                case 3:
                    <a href="#" class="pValue medium" title="Medium Impact">
                        @Model.Idea.Impact
                        <span class="pLabel">impact</span>
                    </a>
                    break;
                case 4:
                case 5:
                    <a href="#" class="pValue low" title="High Impact">
                        @Model.Idea.Impact
                        <span class="pLabel">impact</span>
                    </a>
                    break;
                default:
                    break;
            }
        }
    </div>
    <div class="bigMeta">
        <span class="metaText">
            Submitted @Model.Idea.Submitted • Last edit: @Model.Idea.Last_Edit • Comments: @Model.Idea.Comments.Count()
        </span>
        <div class="hashtags">
            @{
                switch (Model.Idea.Status)
                {
                    case "NEW":
                        <a href="~/@Model.Database/Ideas/Index/new" class="hashtag new hashtagButton" data-toggle="tooltip" data-placement="bottom" title="New Idea">
                            NEW
                        </a>
                        break;
                    case "UNDER_REVIEW":
                        <a href="~/@Model.Database/ideas/index/under_review" class="hashtag progress hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Idea In Progress">
                            UNDER REVIEW
                        </a>
                        break;
                    case "UNDER_IMPLEMENTATION":
                        <a href="~/@Model.Database/ideas/index/under_implementation" class="hashtag progress hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Idea In Progress">
                            UNDER IMPLEMENTATION
                        </a>
                        break;
                    case "IMPLEMENTED":
                        <a href="~/@Model.Database/Ideas/Index/implemented" class="hashtag implemented hashtagButton" data-toggle="tooltip" data-placement="bottom" title="New Idea">
                            IMPLEMENTED
                        </a>
                        break;
                    default:
                        break;
                }
            }
            @foreach (var hashtag in Model.Idea.Hashtags)
            {
                <a href="~/@Model.Database/Ideas/Hashtag/@hashtag.Tag" class="hashtag tag hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Test">
                    #@hashtag.Tag
                </a>
            }
        </div>
        <!-- Manager -->
        @{
            if (Model.Idea.Status.ToLower().Equals("new"))
            {
                <div class="evaluate">
                    <a href="#" class="btn btn-accept glyphicon glyphicon-check pull-right" role="button" onclick="AcceptIdea(@Model.Idea.Id)"></a>
                    <a href="#" class="btn btn-deny glyphicon glyphicon-remove pull-right" role="button" onclick="DenyIdea(@Model.Idea.Id)"></a>
                </div>
            }
        }
    </div>
</div>

@{
    if (!Model.Idea.Status.ToLower().Equals("new"))
    {
    <div class="panel comments wrap circleBorder">
        <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#tasks"></button>
        <span class="commentLabel" aria-hidden="true">
            
        </span>
    </div>

    <div class="panel comments wrap circleBorder">
        <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#comments"></button>
        <span class="commentLabel" aria-hidden="true">
            Comments: @Model.Idea.Comments.Count()
        </span>
        <ul id="comments" class="collapse comments">
            @foreach (var item in Model.Idea.Comments)
            {
                <li class="comment">
                    <span class="commentDate">@item.Date.Day / @item.Date.Month / @item.Date.Year</span><br />
                    <span class="commentAuthor"><strong>Jeppi Hansen</strong></span>
                    <p>@item.Body</p>
                </li>
            }

        <li>
            <form>
                <textarea id="commentInput" class="descInput mentions" placeholder="Comment"></textarea>
            </form>
            <button id="postComment" class="btn btn-primary get-mentions pull-right" role="button" onclick="addComment(@Model.Idea.Id)">
                Post Comment
            </button>
        </li>
        </ul>
    </div>
    }
}

<script>
    function AcceptIdea(value) {
        $.ajax({
            url: 'https://localhost:44377/api/ideas/escalate/UNDER_REVIEW/' + value,
            type: 'GET',
            dataType: 'json',
        });

        location.reload();
    }

    function DenyIdea(value) {
        $.ajax({
            url: 'https://localhost:44377/api/ideas/escalate/DELETED/' + value,
            type: 'GET',
            dataType: 'json',
        });

        location.reload();
    }

    function addComment(val) {
        var text = document.getElementById("commentInput").value;

        var dataObject =
        {
            "Body": text,
            "IdeaId": val,
        };

        //alert(JSON.stringify(mentions));
        //alert(JSON.stringify($('textarea').mentionsInput('getValue')));

        var dataJson = JSON.stringify(dataObject);
        //alert(text);

        $.ajax({
            type: "POST",
            url: "https://localhost:44377/api/comments/create",
            contentType: "application/json",
            data: dataJson,
            success: function (data, textStatus, xhr) {
                location.reload();
            }
        });

    }


    $('.mentions').mentionsInput({
        source: function (request, response) {
            $.ajax({
                url: 'https://localhost:44377/api/managers/getall',
                type: 'GET',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    //data[value] = data[name];
                    function iterate(item) {
                        item.uid = item.id;
                        item.value = item.name;
                    }

                    data.forEach(iterate);
                    //alert(JSON.stringify(data));
                    response(data);
                }
            });
        },

        showAtCaret: true
    });

    //TODO: Mentions
    /*$('.get-mentions').click(function () {
        $('.mentions').mentionsInput('getValue', function (text) {
            alert(text);
        });
    });*/
    
</script>
