@model ESKOBSite.Viewmodel.IdeaViewmodel
@{
    ViewBag.Title = "Idea";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Database = Model.Database.ToLower();
}
<head>
    <script src="https://code.jquery.com/jquery-1.9.1.js"></script>
    <script src="https://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
    <script src="~/Scripts/jquery.mentions.js" type="text/javascript"></script>

    <meta http-equiv="Cache-control" content="no-cache">
    <meta http-equiv="Expires" content="-1">
</head>

<div class="crumb circleBorder">
    <a href="~/@Model.Database/Ideas">Ideas</a>     •     <h1 class="title">@Model.Idea.Title</h1>
</div>

<div class="panel idea wrap circleBorder">
    <div class="priority">
        @{
            switch (Model.Idea.Priority)
            {
                case "H":
                    <a href="~/@Model.Database/Ideas/Index/h" class="pValue high" title="High Priority">
                        H
                        <span class="pLabel">priority</span>
                    </a>
                    break;
                case "M":
                    <a href="~/@Model.Database/Ideas/Index/m" class="pValue medium" title="Medium Priority">
                        M
                        <span class="pLabel">priority</span>
                    </a>
                    break;
                case "L":
                    <a href="~/@Model.Database/Ideas/Index/l" class="pValue low" title="Low Priority">
                        L
                        <span class="pLabel">priority</span>
                    </a>
                    break;
                default:
                    break;
            }
        }
    </div>
    <div class="ideaDescription">
        <p>
            @Model.Idea.Description
        </p>
    </div>
    <div class="scales">
        @{
            switch (Model.Idea.Effort)
            {
                case 1:
                case 2:
                    <a href="#" class="pValue low" title="Low Effort">
                        @Model.Idea.Effort
                        <span class="pLabel">effort</span>
                    </a>
                    break;
                case 3:
                    <a href="#" class="pValue medium" title="Medium Effort">
                        @Model.Idea.Effort
                        <span class="pLabel">effort</span>
                    </a>
                    break;
                case 4:
                case 5:
                    <a href="#" class="pValue high" title="High Effort">
                        @Model.Idea.Effort
                        <span class="pLabel">effort</span>
                    </a>
                    break;
                default:
                    break;
            }

            switch (Model.Idea.Impact)
            {
                case 1:
                case 2:
                    <a href="#" class="pValue high" title="Low Impact">
                        @Model.Idea.Impact
                        <span class="pLabel">impact</span>
                    </a>
                    break;
                case 3:
                    <a href="#" class="pValue medium" title="Medium Impact">
                        @Model.Idea.Impact
                        <span class="pLabel">impact</span>
                    </a>
                    break;
                case 4:
                case 5:
                    <a href="#" class="pValue low" title="High Impact">
                        @Model.Idea.Impact
                        <span class="pLabel">impact</span>
                    </a>
                    break;
                default:
                    break;
            }
        }
    </div>
    <div class="bigMeta">
        <span class="metaText">
            Submitted @Model.Idea.Submitted • Last edit: @Model.Idea.Last_Edit • Comments: @Model.Idea.Comments.Count()
        </span>
        <div class="hashtags">
            @{
                switch (Model.Idea.Status)
                {
                    case "NEW":
                        <a href="~/@Model.Database/Ideas/Index/new" class="hashtag new hashtagButton" data-toggle="tooltip" data-placement="bottom" title="New Idea">
                            NEW
                        </a>
                        break;
                    case "UNDER_REVIEW":
                        <a href="~/@Model.Database/ideas/index/under_review" class="hashtag progress hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Idea In Progress">
                            UNDER REVIEW
                        </a>
                        break;
                    case "UNDER_IMPLEMENTATION":
                        <a href="~/@Model.Database/ideas/index/under_implementation" class="hashtag progress hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Idea In Progress">
                            UNDER IMPLEMENTATION
                        </a>
                        break;
                    case "IMPLEMENTED":
                        <a href="~/@Model.Database/Ideas/Index/implemented" class="hashtag implemented hashtagButton" data-toggle="tooltip" data-placement="bottom" title="New Idea">
                            IMPLEMENTED
                        </a>
                        break;
                    case "DELETED":
                        <a href="#" class="hashtag deleted hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Deleted Idea">
                            DELETED
                        </a>
                        break;
                    default:
                        break;
                }
            }
            @foreach (var hashtag in Model.Idea.Hashtags)
            {
                <a href="~/@Model.Database/Ideas/Hashtag/@hashtag.Tag" class="hashtag tag hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Test">
                    #@hashtag.Tag
                </a>
            }
        </div>
        <!-- Manager -->
        @{
            if (!Model.Idea.Status.ToLower().Equals("deleted") && !Model.Idea.Status.ToLower().Equals("implemented"))
            {
                <div class="evaluate">
                    <a href="#" class="btn btn-accept glyphicon glyphicon-check pull-right" role="button" onclick="updateStatus(@Model.Idea.Id, '@Model.Idea.Status')"></a>
                    <a href="#" class="btn btn-deny glyphicon glyphicon-remove pull-right" role="button" onclick="deleteIdea(@Model.Idea.Id)"></a>
                </div>
            }
        }
    </div>
</div>

@{
    if (!Model.Idea.Status.ToLower().Equals("new"))
    {
        <div class="panel comments wrap circleBorder">
            <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#review"></button>
            <span class="commentLabel" aria-hidden="true">
                Cost Saving
            </span>
            <ul id="review" class="collapse comments">
                <li>
                    <form>
                        <textarea id="costInput" class="descInput" rows="10" placeholder="Estimated Cost Savings">@Model.Idea.Cost_Save</textarea>
                    </form>
                </li>
                <li>
                    <a href="#" class="btn btn-primary pull-right" role="button" onclick="saveCost(@Model.Idea.Id)">
                        Save
                    </a>
                </li>
            </ul>
        </div>

        <div class="panel comments wrap circleBorder">
            <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#tasks"></button>
            <span class="commentLabel" aria-hidden="true">
                Tasks: @Model.Idea.Tasks.Count()
            </span>
            <ul id="tasks" class="collapse comments">
                @foreach (var item in Model.Idea.Tasks)
                {
                    <li class="idea">
                        <div class="info">
                            <div class="hashtags">
                                @{
                                    switch (item.Status)
                                    {
                                        case "NOT_STARTED":
                                            <a href="#" class="hashtag new hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Not Started">
                                                NOT STARTED
                                            </a>
                                            break;
                                        case "IN_PROGESS":
                                            <a href="#" class="hashtag progress hashtagButton" data-toggle="tooltip" data-placement="bottom" title="In Progress">
                                                IN PROGRESS
                                            </a>
                                            break;
                                        case "DONE":
                                            <a href="#" class="hashtag implemented hashtagButton" data-toggle="tooltip" data-placement="bottom" title="Done">
                                                DONE
                                            </a>
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            </div>
                            <h2 class="title">
                                <a href="~/@Model.Database/Tasks/Task/@item.Id">@item.Title</a>
                            </h2>
                            <div class="meta">
                                <span class="metaText">
                                    Author: Test @item.Creator.Name • Comments: @item.Comments.Count()
                                </span>
                            </div>
                        </div>
                    </li>
                }

                <li>
                    <a href="~/@Model.Database/tasks/create/@Model.Idea.Id" class="btn btn-primary pull-right" role="button">
                        Add Task
                    </a>
                </li>
            </ul>
        </div>

        <div class="panel comments wrap circleBorder">
            <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#comments"></button>
            <span class="commentLabel" aria-hidden="true">
                Total Comments: @Model.Idea.Comments.Count()
            </span>
            <ul id="comments" class="collapse comments">
                @foreach (var item in Model.Idea.Comments)
                {
                    if (item.Task == null)
                    {
                        <li class="comment">
                            <span class="commentDate">@item.Date.Day / @item.Date.Month / @item.Date.Year</span><br />
                            <span class="commentAuthor"><strong>Jeppi Hansen</strong></span>
                            <p>@item.Body</p>
                        </li>
                    }
                }

                <li>
                    <form>
                        <textarea id="commentInput" class="descInput mentions" placeholder="Comment"></textarea>
                    </form>
                    <button id="postComment" class="btn btn-primary get-mentions pull-right" role="button" onclick="addComment(@Model.Idea.Id)">
                        Post Comment
                    </button>
                </li>
            </ul>
        </div>
    }
}

@{
    if (Model.Idea.Status.ToLower().Equals("implemented"))
    {
        <div class="panel comments wrap circleBorder">
            <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#challenges"></button>
            <span class="commentLabel" aria-hidden="true">
                Challenges
            </span>
            <ul id="challenges" class="collapse comments">
                <li>
                    <form>
                        <textarea id="challengesInput" class="descInput" rows="10" placeholder="Challenges">@Model.Idea.Challenges</textarea>
                    </form>
                </li>
                <li>
                    <a href="#" class="btn btn-primary pull-right" role="button" onclick="saveInfo(@Model.Idea.Id)">
                        Save
                    </a>
                </li>
            </ul>
        </div>

        <div class="panel comments wrap circleBorder">
            <button class="btn btn-clear glyphicon glyphicon-collapse-down pull-right" data-toggle="collapse" data-target="#results"></button>
            <span class="commentLabel" aria-hidden="true">
                Results
            </span>
            <ul id="results" class="collapse comments">
                <li>
                    <form>
                        <textarea id="resultsInput" class="descInput" rows="10" placeholder="Results">@Model.Idea.Results</textarea>
                    </form>
                </li>
                <li>
                    <a href="#" class="btn btn-primary pull-right" role="button" onclick="saveInfo(@Model.Idea.Id)">
                        Save
                    </a>
                </li>
            </ul>
        </div>
    }
}
<script>
    var database = "@(ViewBag.Database)";

    function updateStatus(id, status) {
        var newStatus = "";
        switch (status) {
            case "NEW":
                newStatus = "UNDER_REVIEW";
                break;
            case "UNDER_REVIEW":
                newStatus = "UNDER_IMPLEMENTATION";
                break;
            case "UNDER_IMPLEMENTATION":
                newStatus = "IMPLEMENTED";
                break;
            default:
                break;
        }

        $.ajax({
            url: 'https://localhost:44377/' + database + '/ideas/escalate/' + newStatus + '/' + id,
            type: 'GET',
            dataType: 'json',
        });

        location.reload(true);
    }

    function deleteIdea(id) {
        $.ajax({
            url: 'https://localhost:44377/' + database + '/ideas/escalate/DELETED/' + value,
            type: 'GET',
            dataType: 'json',
        });

        location.reload(true);
    }

    function saveInfo(id) {
        var cost = document.getElementById("costInput").value;
        var challenges = document.getElementById("challengesInput").value;
        var results = document.getElementById("resultsInput").value;
        var dataObject = {
            "Id": id,
            "Cost_Save": cost,
            "Challenges": challenges,
            "Results": results
        }

        $.ajax({
            type: 'POST',
            url: 'https://localhost:44377/' + database + '/ideas/edit',
            contentType: 'application/json',
            data: JSON.stringify(dataObject)
        });

        location.reload(true);
    }

    function addComment(val) {
        var text = document.getElementById("commentInput").value;

        var dataObject =
        {
            "Body": text,
            "IdeaId": val,
        };

        //alert(JSON.stringify(mentions));
        //alert(JSON.stringify($('textarea').mentionsInput('getValue')));

        var dataJson = JSON.stringify(dataObject);
        //alert(text);

        $.ajax({
            type: "POST",
            url: "https://localhost:44377/" + database + "/comments/create",
            contentType: "application/json",
            data: dataJson,
            success: function (data, textStatus, xhr) {
                location.reload(true);
            }
        });

    }


    $('.mentions').mentionsInput({
        source: function (request, response) {
            $.ajax({
                url: 'https://localhost:44377/' + database + '/managers/getall',
                type: 'GET',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    //data[value] = data[name];
                    function iterate(item) {
                        item.uid = item.id;
                        item.value = item.name;
                    }

                    data.forEach(iterate);
                    //alert(JSON.stringify(data));
                    response(data);
                }
            });
        },

        showAtCaret: true
    });

                        //TODO: Mentions
    /*$('.get-mentions').click(function () {
        $('.mentions').mentionsInput('getValue', function (text) {
            alert(text);
        });
    });*/

</script>
